
<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <title>葡萄藤PPT</title>

    <link rel="stylesheet" href="https://ptteng.github.io/PPT/css/reveal/reveal.css">

    <!-- PPT主题，可以在/css/reveal/theme/中选择其他主题，目前暂时只能使用该模板 -->
    <link rel="stylesheet" href="https://ptteng.github.io/PPT/css/reveal/theme/ptt.css">

    <!-- syntax highlighting 代码高亮主题 -->
    <link rel="stylesheet" href="https://ptteng.github.io/PPT/lib/reveal/css/zenburn.css">

    <!-- 打印和PDF输出样式 -->
    <script>
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = window.location.search.match( /print-pdf/gi ) ? 'https://ptteng.github.io/PPT/css/reveal/print/pdf.css' : '../css/reveal/print/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    </script>
</head>
<body>
<img src="https://ptteng.github.io/PPT/img/demo/logo.png" alt="" usemap="#pttmap" class="base-logo">
<map name="pttmap">
    <area shape="rect" coords="0,0,276,58" href="http://www.jnshu.com" alt="" target="_blank"/>
</map>
<div class="reveal">
    <div class="slides">
        <section>
            <h2>为什么要使用Interface，而不是直接使用一个实体类来完成任务？</h2>
            <h2>Interface和Impl这种方式的好处是什么？</h2>
            <h3>java分享会</h3>
            <p>分享人：曹樾</p>
        </section>
        <section>
            <p>1.背景介绍</p>
            <p>2.知识剖析</p>
            <p>3.常见问题</p>
            <p>4.解决方案</p>
            <p>5.编码实战</p>
            <p>6.扩展思考</p>
            <p>7.参考文献</p>
            <p>8.更多讨论</p>
        </section>
        <section>
            <h3>1.背景介绍</h3>
        </section>
        <section>
            <p>先介绍下背景</p>
			<p>接口是什么？</p>
            <p>Java接口是一系列方法的声明，是一些方法特征的集合，一个接口只有方法的特征没有方法的实现，</p>
            <p>因此这些方法可以在不同的地方被不同的类实现，而这些实现可以具有不同的行为</p>
        </section>
	
        <section>
            <h3>2.知识剖析</h3>
        </section>
        <section>
                <p>接口的特点</p>
                <p>1、Java接口中的成员变量默认都是public,static,final类型的(都可省略),必须被显示初始化,即接口中的成员变量为常量(大写,单词之间用"_"分隔)</p>
				<p>2、Java接口中的方法默认都是public,abstract类型的(都可省略),没有方法体,不能被实例化</p>
				<p>3、Java接口中只能包含public,static,final类型的成员变量和public,abstract类型的成员方法</p>
                <p>4、接口中没有构造方法,不能被实例化</p>
                <p>5、一个接口不能实现(implements)另一个接口,但它可以继承多个其它的接口</p>	
                <p>6、Java接口必须通过类来实现它的抽象方法</p>
                <p>7、当类实现了某个Java接口时,它必须实现接口中的所有抽象方法,否则这个类必须声明为抽象类</p>
                <p>8、不允许创建接口的实例(实例化),但允许定义接口类型的引用变量,该引用变量引用实现了这个接口的类的实例</p>
                <p>9、一个类只能继承一个直接的父类,但可以实现多个接口,间接的实现了多继承.</p>
		</section>
		<section>
                <p>Interface和Impl这种方式的好处是什么？</p>
                <p>便于封装</p>
                <p>降低耦合</p>
        </section>
         <section>
            <h3>3.常见问题</h3>
        </section>
        <section>
            <p>为什么要使用接口</p>
            
        </section>
		
		
        <section>
            <h3>4.解决方案</h3>
        </section> <section>
            <p> 对修改封闭，对扩展开放</p>     
		</section>
        
        <section>
            <h3>5.编码实战</h3>

        </section>
        
        <section>
            <h3>6.扩展思考</h3>
			<p>写java的代码的时候，感觉到处都是接口，尤其是在写web的时候，spring的框架基本都是用接口来调用的，</p>
            <p>难道仅仅是为了抽象而抽象，为了隔离而隔离？</p>
            <p>我不明白这些接口存在的意义是什么，大部分的接口一直都只是对应一个类，而且基本永远也只会对应一个类，这些接口真的有必要存在么？</p>
        </section>
        <section>
            <p>其实接口就是调用端和实现端做个规范，调用端和实现端按照规范做正确的输入和输出调用，</p>
            <p>异常的输入输出捕获，双方对各自内部的业务都不需要了解</p>
        </section>
        
        <section>
            <h3>7.参考文献</h3>
            <p>简书</p>
            <p>百度</p>
        </section>
        <section>
            <h3>8.更多讨论</h3>
            <p></p>
            <p></p>
        </section>
        <section>
            <h4>鸣谢</h4>
            <p>感谢观看,如有出错,恳请指正</p>
            <p><small>BY : 曹樾</small></p>
        </section>

    </div>
</div>

<script src="https://ptteng.github.io/PPT/lib/reveal/js/head.min.js"></script>
<script src="https://ptteng.github.io/PPT/lib/reveal/reveal.js"></script>

<script>

    // 以下为常见配置属性的默认值
    // {
    // 	controls: true, // 是否在右下角展示控制条
    // 	progress: true, // 是否显示演示的进度条
    // 	slideNumber: false, // 是否显示当前幻灯片的页数编号，也可以使用代码slideNumber: 'c / t' ，表示当前页/总页数。
    // 	history: false, // 是否将每个幻灯片改变加入到浏览器的历史记录中去
    // 	keyboard: true, // 是否启用键盘快捷键来导航
    // 	overview: true, // 是否启用幻灯片的概览模式，可使用"Esc"或"o"键来切换概览模式
    // 	center: true, // 是否将幻灯片垂直居中
    // 	touch: true, // 是否在触屏设备上启用触摸滑动切换
    // 	loop: false, // 是否循环演示
    // 	rtl: false, // 是否将演示的方向变成RTL，即从右往左
    // 	fragments: true, // 全局开启和关闭碎片。
    // 	autoSlide: 0, // 两个幻灯片之间自动切换的时间间隔（毫秒），当设置成 0 的时候则禁止自动切换，该值可以被幻灯片上的 ` data-autoslide` 属性覆盖
    // 	transition: 'default', // 切换过渡效果，有none/fade/slide/convex/concave/zoom
    // 	transitionSpeed: 'default', // 过渡速度，default/fast/slow
    // 	mouseWheel: true, //是否启用通过鼠标滚轮来切换幻灯片
    // }

    // 初始化幻灯片
    Reveal.initialize({
        history: true,
        dependencies: [
            { src: 'https://ptteng.github.io/PPT/plugin/markdown/marked.js' },
            { src: 'https://ptteng.github.io/PPT/plugin/markdown/markdown.js' },
            { src: 'https://ptteng.github.io/PPT/plugin/notes/notes.js', async: true },
            { src: 'https://ptteng.github.io/PPT/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }
        ]
    });
</script>
</body>
</html>